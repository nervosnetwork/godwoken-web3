import {
  parseSerializeL2Transaction,
  decodePolyjuiceArgs,
  isPolyjuiceTransactionArgs,
  serializeEthAddrRegArgs,
  parseSerializeEthAddrRegArgs,
  serializeSudtArgs,
  parseSerializeSudtArgs,
  serializeMetaContractArgs,
  parseSerializeMetaContractArgs,
} from "../../src/parse-tx";
import test from "ava";
import {
  MetaContractArgs,
  CreateAccount,
  EthAddrRegArgsType,
  MetaContractArgsType,
  normalizers,
  schemas,
  SetMapping,
  BatchSetMapping,
  SudtArgsType,
  SudtTransfer,
  BatchCreateEthAccounts,
} from "@godwoken-web3/godwoken";
import { Reader } from "@ckb-lumos/toolkit";

test("parseSerializeL2Transaction", (t) => {
  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x4",
      nonce: "0xa4",
      args: "0xffffff504f4c59033bbf01000000000001000000000000000000000000000000000000000000000000000000000000009507000060806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f4d485400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620f42406002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b61059f806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505056fea2646970667358221220f107dfb0b4d544ea10ea368dbb20521f1bff7e9058a4531e618e37fc130d424d64736f6c63430007050033",
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };
  const serializeL2Tx =
    "0x4a0800000c00000005080000f9070000180000002000000024000000280000002c000000e8160100000000001000000004000000a4000000c9070000ffffff504f4c59033bbf01000000000001000000000000000000000000000000000000000000000000000000000000009507000060806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f4d485400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620f42406002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b61059f806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505056fea2646970667358221220f107dfb0b4d544ea10ea368dbb20521f1bff7e9058a4531e618e37fc130d424d64736f6c6343000705003341000000bde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800";
  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);
});

test("decodePolyjuiceTransactionArgs", (t) => {
  const expectPolyjuiceTx = {
    isCreate: true,
    gasLimit: "0x1bf3b",
    gasPrice: "0x1",
    value: "0x0",
    inputSize: "0x795",
    input:
      "0x60806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f4d485400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620f42406002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b61059f806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505056fea2646970667358221220f107dfb0b4d544ea10ea368dbb20521f1bff7e9058a4531e618e37fc130d424d64736f6c63430007050033",
  };
  const args =
    "0xffffff504f4c59033bbf01000000000001000000000000000000000000000000000000000000000000000000000000009507000060806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f4d485400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620f42406002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b61059f806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505056fea2646970667358221220f107dfb0b4d544ea10ea368dbb20521f1bff7e9058a4531e618e37fc130d424d64736f6c63430007050033";
  const tx = decodePolyjuiceArgs(args);
  t.deepEqual(expectPolyjuiceTx, tx);
});

test("isPolyjuiceTransactionArgs", (t) => {
  const args =
    "0xffffff504f4c59033bbf01000000000001000000000000000000000000000000000000000000000000000000000000009507000060806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e000000000000000000000000000000008152506000908051906020019061004f92919061013c565b506040518060400160405280600381526020017f4d485400000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061013c565b50620f42406002553480156100af57600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101e7565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261017257600085556101b9565b82601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b5b808211156101e35760008160009055506001016101cb565b5090565b61059f806101f66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd146100ea57806370a08231146101085780638da5cb5b1461016057806395d89b4114610194578063a9059cbb14610217575b600080fd5b61006f610265565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f2610303565b6040518082815260200191505060405180910390f35b61014a6004803603602081101561011e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610309565b6040518082815260200191505060405180910390f35b610168610352565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019c610378565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101dc5780820151818401526020810190506101c1565b50505050905090810190601f1680156102095780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102636004803603604081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610416565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f7420656e6f75676820746f6b656e7300000000000000000000000000000081525060200191505060405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505056fea2646970667358221220f107dfb0b4d544ea10ea368dbb20521f1bff7e9058a4531e618e37fc130d424d64736f6c63430007050033";
  const isPoly = isPolyjuiceTransactionArgs(args);
  t.true(isPoly);
});

test("parse sudt transfer tx", (t) => {
  const expectSudtTransfer = {
    to_address:
      "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
    amount: "0xffffff",
    fee: {
      registry_id: "0x1",
      amount: "0x10",
    },
  };
  const sudtArgs = {
    type: SudtArgsType.SUDTTransfer,
    value: expectSudtTransfer,
  };
  const serializedSudtArgs = serializeSudtArgs(sudtArgs);
  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x1",
      nonce: "0xa4",
      args: serializedSudtArgs,
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };

  const serializeL2Tx = new Reader(
    schemas.SerializeL2Transaction(
      normalizers.NormalizeL2Transaction(expectL2Tx)
    )
  ).serializeJson();

  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);

  const sudtTransfer = parseSerializeSudtArgs(l2Tx.raw.args)
    .value as SudtTransfer;
  t.deepEqual(expectSudtTransfer, sudtTransfer);
});

test("parse EthAddrReg tx", (t) => {
  const expectSetMapping = {
    gw_script_hash:
      "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
    fee: {
      registry_id: "0x1",
      amount: "0x10",
    },
  };
  const ethAddrRegArgs = {
    type: EthAddrRegArgsType.SetMapping,
    value: expectSetMapping,
  };
  const serializedSetMapping = serializeEthAddrRegArgs(ethAddrRegArgs);

  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x2",
      nonce: "0xa4",
      args: serializedSetMapping,
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };
  const serializeL2Tx = new Reader(
    schemas.SerializeL2Transaction(
      normalizers.NormalizeL2Transaction(expectL2Tx)
    )
  ).serializeJson();

  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);

  const setMapping = parseSerializeEthAddrRegArgs(l2Tx.raw.args)
    .value as SetMapping;
  t.deepEqual(setMapping, expectSetMapping);
});

test("parse EthAddrReg batchSetMapping tx", (t) => {
  const expectBatchSetMapping = {
    gw_script_hashes: [
      "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
      "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
      "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
    ],
    fee: {
      registry_id: "0x1",
      amount: "0x10",
    },
  };
  const ethAddrRegArgs = {
    type: EthAddrRegArgsType.BatchSetMapping,
    value: expectBatchSetMapping,
  };
  const serializedSetMapping = serializeEthAddrRegArgs(ethAddrRegArgs);

  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x2",
      nonce: "0xa4",
      args: serializedSetMapping,
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };
  const serializeL2Tx = new Reader(
    schemas.SerializeL2Transaction(
      normalizers.NormalizeL2Transaction(expectL2Tx)
    )
  ).serializeJson();

  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);

  const batchSetMapping = parseSerializeEthAddrRegArgs(l2Tx.raw.args)
    .value as BatchSetMapping;
  t.deepEqual(batchSetMapping, expectBatchSetMapping);
});

test("parse MetaContract create account tx", (t) => {
  const expectCreateAccount: CreateAccount = {
    script: {
      code_hash:
        "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
      hash_type: "type",
      args: "0x1111",
    },
    fee: {
      registry_id: "0x1",
      amount: "0x10",
    },
  };
  const metaContractArgs: MetaContractArgs = {
    type: MetaContractArgsType.CreateAccount,
    value: expectCreateAccount,
  };
  const serializedMetaContractArgs =
    serializeMetaContractArgs(metaContractArgs);

  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x0",
      nonce: "0xa4",
      args: serializedMetaContractArgs,
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };
  const serializeL2Tx = new Reader(
    schemas.SerializeL2Transaction(
      normalizers.NormalizeL2Transaction(expectL2Tx)
    )
  ).serializeJson();

  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);

  const createAccount = parseSerializeMetaContractArgs(l2Tx.raw.args).value;
  t.deepEqual(createAccount, expectCreateAccount);
});

test("parse MetaContract batch create eth account tx", (t) => {
  const expectBatchCreate: BatchCreateEthAccounts = {
    scripts: [
      {
        code_hash:
          "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
        hash_type: "type",
        args: "0x1111",
      },
      {
        code_hash:
          "0x3991637c340d585858f45c440116aaf2d13580517fc0fffeb67b5bffe35d77d0",
        hash_type: "type",
        args: "0x1111",
      },
    ],
    fee: {
      registry_id: "0x1",
      amount: "0x10",
    },
  };
  const metaContractArgs: MetaContractArgs = {
    type: MetaContractArgsType.BatchCreateEthAccounts,
    value: expectBatchCreate,
  };
  const serializedMetaContractArgs =
    serializeMetaContractArgs(metaContractArgs);

  const expectL2Tx = {
    raw: {
      chain_id: "0x116e8",
      from_id: "0x10",
      to_id: "0x0",
      nonce: "0xa4",
      args: serializedMetaContractArgs,
    },
    signature:
      "0xbde03b87b7da48cc186a51f199355346a8173249886da75898159b1d00bb17940a908af2cc753b9003863a35a0bd35287e7c9f103339e05532d2be179d88d41800",
  };
  const serializeL2Tx = new Reader(
    schemas.SerializeL2Transaction(
      normalizers.NormalizeL2Transaction(expectL2Tx)
    )
  ).serializeJson();

  const l2Tx = parseSerializeL2Transaction(serializeL2Tx);
  t.deepEqual(l2Tx, expectL2Tx);

  const createAccount = parseSerializeMetaContractArgs(l2Tx.raw.args).value;
  t.deepEqual(createAccount, expectBatchCreate);
});
